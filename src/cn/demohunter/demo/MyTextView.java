package cn.demohunter.demo;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import java.util.Map.Entry;import java.util.regex.Matcher;import java.util.regex.Pattern;import android.content.Context;import android.graphics.drawable.AnimationDrawable;import android.graphics.drawable.BitmapDrawable;import android.text.Spannable;import android.text.SpannableString;import android.text.style.ImageSpan;import android.util.AttributeSet;import android.widget.TextView;public class MyTextView extends TextView {        private static HashMap<String, Integer> mFace = new HashMap<String, Integer>();            public MyTextView(Context context) {        super(context);    }        public MyTextView(Context context, AttributeSet attrs) {        super(context, attrs);    }        public MyTextView(Context context, AttributeSet attrs, int defStyle) {        super(context, attrs, defStyle);    }            private boolean mRuning = true;        public void setMyText(String text) {                mFace.put("[顶]", R.drawable.face1);                String regex = "\\[([^\\]]+)\\]";        Pattern p = Pattern.compile(regex);                        System.out.println("mFace = " + mFace);                Matcher m = p.matcher(text);                ArrayList<String> faceList = new ArrayList<String>();                        while (m.find()) {            String val = m.group();            if (mFace.containsKey(val)) {                faceList.add(val);            }        }                if (faceList.size() > 0) {            SpannableString ss = new SpannableString(text);            GIFOpenHelper help = new GIFOpenHelper();                        HashMap<Integer, AnimationDrawable> anim = new HashMap<Integer, AnimationDrawable>();                        int start = 0;            int end = 0;            for (String string : faceList) {                                int res = mFace.get(string);                AnimationDrawable faceAnimation;                                if (!anim.containsKey(res)) {                    faceAnimation = new AnimationDrawable();                    anim.put(res, faceAnimation);                } else {                    faceAnimation = anim.get(res);                }                                help.read(getResources().openRawResource(res));                BitmapDrawable bd = new BitmapDrawable(help.getImage());                faceAnimation.addFrame(bd, help.getDelay(0));                for (int i = 1; i < help.getFrameCount(); i++) {                    faceAnimation.addFrame(                            new BitmapDrawable(help.nextBitmap()),                            help.getDelay(i));                }                faceAnimation.setBounds(0, 0, bd.getIntrinsicWidth() * 2,                        bd.getIntrinsicHeight() * 2);                faceAnimation.setOneShot(false);                ImageSpan span = new ImageSpan(faceAnimation,                        ImageSpan.ALIGN_BASELINE);                start = text.indexOf(string, end);                end = start + string.length();                                ss.setSpan(span, start, end, Spannable.SPAN_INCLUSIVE_EXCLUSIVE);            }                        setText(ss);            for (Iterator<Entry<Integer, AnimationDrawable>> it = anim                    .entrySet().iterator(); it.hasNext();) {                Map.Entry<Integer, AnimationDrawable> e = (Map.Entry<Integer, AnimationDrawable>) it                        .next();                final AnimationDrawable faceAnimation = e.getValue();                                new Thread(new Runnable() {                    byte mFrame = 0;                    public void run() {                        while (mRuning) {                            System.out.println("gif一直运行aaaaaaaa = ");                                                        faceAnimation.selectDrawable(mFrame++);                            if (mFrame == faceAnimation.getNumberOfFrames()) {                                mFrame = 0;                            }                            postInvalidate();                            try {                                Thread.sleep(100);                            } catch (InterruptedException e) {                                e.printStackTrace();                            }                        }                    }                }).start();            }                    } else {            setText(text);        }                System.out.println("faceList = " + faceList);            }            public void setRuning(boolean runing) {        mRuning = runing;    }}